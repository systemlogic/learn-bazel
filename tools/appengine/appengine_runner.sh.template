#!/bin/bash
# Copyright 2015 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

case "$0" in
/*) self="$0" ;;
*)  self="$PWD/$0";;
esac

if [[ -z "$JAVA_RUNFILES" ]]; then
  if [[ -e "${self}.runfiles/%{workspace_name}" ]]; then
    JAVA_RUNFILES="${self}.runfiles/%{workspace_name}"
  fi
fi

jvm_bin="${JAVA_RUNFILES}/%{java}"
if [[ ! -x ${jvm_bin} ]]; then
  jvm_bin=$(which java)
fi

APP_ENGINE_ROOT="${JAVA_RUNFILES}/%{appengine_sdk}"
main_class="com.google.appengine.tools.development.DevAppServerMain"
classpath="%{classpath}"

# If we are not on the data path, we'll get a warning:
# WARNING: Your working directory, ($PWD) is not equal to your
# web application root (%{data_path})
# You will not be able to access files from your working directory on the
# production server.
cd "%{data_path}"

mkdir -p WEB-INF/lib
for i in $(echo $classpath | tr ":" "\n"); do
  jar="WEB-INF/lib/$(basename "$i")"
  rm -f "$jar"
  ln -s "$i" "$jar"
done

JVM_FLAGS_CMDLINE=()

# Processes an argument for the wrapper. Returns 0 if the given argument
# was recognized as an argument for this wrapper, and 1 if it was not.
function process_wrapper_argument() {
  case "$1" in
    --jvm_flag=*) JVM_FLAGS_CMDLINE+=( "${1#--jvm_flag=}" ) ;;
    --jvm_flags=*) JVM_FLAGS_CMDLINE+=( ${1#--jvm_flags=} ) ;;
    *)
      return 1 ;;
  esac
  return 0
}

# Parse arguments sequentially until the first unrecognized arg is encountered.
# Scan the remaining args for --wrapper_script_flag=X options and process them.
ARGS=()
for ARG in "$@"; do
  if [[ "$ARG" == --wrapper_script_flag=* ]]; then
    process_wrapper_argument "${ARG#--wrapper_script_flag=}" \
      || die "invalid wrapper argument '%s'" "$ARG"
  elif [[ "${#ARGS}" -gt 0 ]] || ! process_wrapper_argument "$ARG"; then
    ARGS+=( "$ARG" )
  fi
done

ARGS=(
  ${JVM_FLAGS}
  "${JVM_FLAGS_CMDLINE[@]}"
  "-Dappengine.sdk.root=${APP_ENGINE_ROOT}"
  ${main_class}
  "${ARGS[@]}"
  .
)

# Linux per-arg limit MAX_ARG_STRLEN == 128k!
if (("${#classpath}" > 120000)); then
  set +o posix  # Enable process substitution.
  exec "${jvm_bin}" -classpath @<(echo "${classpath}") "${ARGS[@]}"
else
  exec "${jvm_bin}" -classpath "${classpath}" "${ARGS[@]}"
fi
